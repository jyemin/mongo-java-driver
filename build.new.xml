<?xml version='1.0'?>

<!--
Copyright 2011, 10gen

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at:

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="mongo-java-driver" default="compile" basedir=".">

    <!-- ******************************************************************* -->
    <!-- Properties                                                          -->
    <!-- ******************************************************************* -->

    <property environment="env"/>

    <property name="src.bson" location="${basedir}/bson/src"/>
    <property name="src.driver-compat" location="${basedir}/driver-compat/src"/>
    <property name="src.driver" location="${basedir}/driver/src"/>


    <property prefix="build.conf" file="build.properties"/>

    <property name="build.dir" location="${basedir}/build"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.util" value="${build.dir}/util"/>

    <property name="test.dir" value="${build.dir}/test"/>
    <property name="test.classes" value="${test.dir}/classes"/>
    <property name="test.output" value="${test.dir}/output"/>

    <property name="cobertura.dir" value="${build.dir}/cobertura"/>
    <property name="cobertura.datafile" location="${cobertura.dir}/cobertura.ser"/>
    <property name="cobertura.classes" location="${cobertura.dir}/classes"/>
    <property name="cobertura.output" value="${cobertura.dir}/output"/>

    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="docs.dir" value="${basedir}/docs"/>


    <!-- ******************************************************************* -->
    <!-- Path definition                                                     -->
    <!-- ******************************************************************* -->

    <path id="build.classpath">
        <pathelement path="${build.classes}" />
    </path>

    <path id="test.lib.classpath">
        <pathelement location="lib/testng-6.3.1.jar"/>
        <pathelement location="lib/junit-4.11.jar"/>
        <pathelement location="lib/hamcrest-core-1.3.jar"/>
    </path>

    <path id="cobertura.lib.classpath">
        <fileset dir="lib/cobertura"><include name="**/*.jar"/></fileset>
    </path>

    <path id="task.classpath">
        <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        <pathelement location="lib/clirr-core-0.6-uber.jar"/>
    </path>

    <!-- ******************************************************************* -->
    <!-- Tasks definition                                                    -->
    <!-- ******************************************************************* -->

    <taskdef classpathref="task.classpath" resource="net/sf/antcontrib/antcontrib.properties"/>
    <taskdef classpathref="cobertura.lib.classpath" resource="tasks.properties" />
    <taskdef classpathref="task.classpath" resource="clirrtask.properties"/>

    <!-- ******************************************************************* -->
    <!-- The init target.                                                    -->
    <!-- ******************************************************************* -->

    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes}" />
    </target>

    <!-- ******************************************************************* -->
    <!-- The clean target.                                                   -->
    <!-- ******************************************************************* -->

    <target name="clean" description="Remove all locally created artifacts">
        <delete dir="${build.dir}"/>
    </target>

    <target name="cleanall" depends="clean">
        <delete dir="${dist.dir}"/>
        <delete dir="${docs.dir}"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- The compile target.                                                 -->
    <!-- ******************************************************************* -->


    <macrodef name="compile">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="classpathref"/>
        <sequential>
            <javac classpathref="@{classpathref}"
                    srcdir="@{srcdir}"
                    destdir="@{destdir}"
                    optimize="off"
                    deprecation="off"
                    source="${build.conf.javac.source}"
                    target="${build.conf.javac.source}"
                    encoding="ISO-8859-1"
                    fork="true"
                    debug="on"
                    includeantruntime="false"
                    memoryMaximumSize="256M"
                    >
                <compilerarg value="-Xlint:all,-rawtypes"/>
            </javac>
        </sequential>
    </macrodef>

    <target name="compile" depends="init">
        <compile
                srcdir="${src.bson}/main"
                destdir="${build.classes}"
                classpathref="build.classpath"
                />
        <compile
                srcdir="${src.driver}/main"
                destdir="${build.classes}"
                classpathref="build.classpath"
                />
        <compile
                srcdir="${src.driver-compat}/main"
                destdir="${build.classes}"
                classpathref="build.classpath"
                />
    </target>

    <!-- ******************************************************************* -->
    <!-- The util compile target.                                            -->
    <!-- ******************************************************************* -->

    <target name="util-compile" depends="init">
        <mkdir dir="${build.util}"/>

        <path id="util.classpath">
            <pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
        </path>

        <compile srcdir="${src.driver}/util"
                 destdir="${build.util}"
                 classpathref="util.classpath"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- The javadocs target.                                                -->
    <!-- ******************************************************************* -->

    <target name="javadocs" description="Generate API docs">
        <antcall target="util-compile"/>
        <mkdir dir="${docs.dir}"/>
        <javadoc
                destdir="${docs.dir}"
                author="true"
                version="true"
                source="${build.conf.javac.source}"
                use="true"
                access="protected">
            <link href="http://download.oracle.com/javase/1.5.0/docs/api/"/>
            <taglet name="DochubTaglet" path="${build.util}"/>
            <taglet name="ManualTaglet" path="${build.util}"/>
            <sourcepath path="${src.bson}/main"/>
            <sourcepath path="${src.driver}/main"/>
            <sourcepath path="${src.driver-compat}/main"/>
        </javadoc>
    </target>


    <!-- ******************************************************************* -->
    <!-- The jar targets.                                                     -->
    <!-- ******************************************************************* -->

    <target name="jar" depends="compile" description="Assemble MongoDB Java Driver JAR files">

        <mkdir dir="${build.classes}/META-INF" />
        <copy file="LICENSE.txt" tofile="${build.classes}/META-INF/LICENSE.txt"/>

        <copy file="${src.driver}/main/META-INF/MANIFEST.MF"
              tofile="${build.classes}/META-INF/MANIFEST.MF"
              filtering="true">
            <filterset>
                <filter token="VERSION" value="${build.conf.lib.version.osgi.compat}"/>
            </filterset>
        </copy>

        <copy file="${src.bson}/main/META-INF/MANIFEST.MF"
              tofile="${build.classes}/META-INF/MANIFEST_BSON.MF"
              filtering="true">
            <filterset>
                <filter token="VERSION" value="${build.conf.lib.version.osgi.compat}"/>
            </filterset>
        </copy>

        <exec executable="git" output="${build.classes}/git-hash">
            <arg value="log" />
            <arg value="--pretty=format:%H" />
            <arg value="-1" />
        </exec>

        <jar jarfile="${build.dir}/${ant.project.name}-${build.conf.lib.version}.jar"
             manifest="${build.classes}/META-INF/MANIFEST.MF">
            <fileset dir="${build.classes}">
                <exclude name="${build.classes}/META-INF/*"/>
            </fileset>
        </jar>

        <jar jarfile="${build.dir}/bson-${build.conf.lib.version}.jar"
             manifest="${build.classes}/META-INF/MANIFEST_BSON.MF">
          <fileset dir="${build.classes}">
              <include name="org/bson/**"/>
              <include name="git-hash"/>
          </fileset>
        </jar>
    </target>

    <target name="javadocs-jar" depends="javadocs" description="Assemble MongoDB JavaDoc JAR files">
        <jar jarfile="${build.dir}/${ant.project.name}-${build.conf.lib.version}-javadoc.jar"
             basedir="${docs.dir}"/>

        <jar jarfile="${build.dir}/bson-${build.conf.lib.version}-javadoc.jar">
            <fileset dir="${docs.dir}">
                <include name="org/bson/**"/>
            </fileset>
        </jar>
    </target>

    <target name="sources-jar" description="Assemble MongoDB Sources JAR files">
        <jar jarfile="${build.dir}/${ant.project.name}-${build.conf.lib.version}-sources.jar">
            <fileset dir="${src.bson}/main">
                <exclude name="META-INF/*"/>
            </fileset>
            <fileset dir="${src.driver}/main">
                <exclude name="META-INF/*"/>
            </fileset>
            <fileset dir="${src.driver-compat}/main">
                <exclude name="META-INF/*"/>
            </fileset>
        </jar>

        <jar jarfile="${build.dir}/bson-${build.conf.lib.version}-sources.jar">
            <fileset dir="${src.bson}/main">
                <exclude name="META-INF/*"/>
            </fileset>
        </jar>
    </target>

    <target name="dist" depends="jar,javadocs-jar, sources-jar">
        <mkdir dir="${dist.dir}"/>
        <copy todir="${dist.dir}">
            <fileset dir="${build.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>

    </target>

    <!-- ******************************************************************* -->
    <!-- The test targets                                                    -->
    <!-- ******************************************************************* -->

    <macrodef name="test">
        <attribute name="dir"/>
        <attribute name="includes" default="**/*.java"/>
        <attribute name="fork" default="yes"/>
        <attribute name="forkmode" default="once"/>
        <attribute name="classpathref"/>
        <element name="filesets"/>
        <sequential>
            <mkdir dir="${test.output}"/>
            <junit fork="@{fork}" forkmode="@{forkmode}" maxmemory="1024m">
                <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}"/>
                <formatter type="xml" usefile="true"/>
                <formatter type="brief" usefile="false"/>
                <classpath refid="@{classpathref}">
                </classpath>
                <batchtest todir="${test.output}">
                    <fileset dir="@{dir}" includes="@{includes}">
                    </fileset>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <target name="test" depends="compile">
       <mkdir dir="${test.classes}"/>

        <path id="test.classpath">
            <pathelement location="${cobertura.classes}"/>
            <path refid="cobertura.lib.classpath"/>
            <path refid="build.classpath"/>
            <path refid="test.lib.classpath"/>
            <pathelement location="${test.classes}"/>
        </path>

       <compile classpathref="test.classpath"
                srcdir="${src.bson}/test"
                destdir="${test.classes}"/>
        <compile classpathref="test.classpath"
                 srcdir="${src.driver-compat}/test"
                 destdir="${test.classes}"/>
        <compile classpathref="test.classpath"
                 srcdir="${src.driver}/test"
                 destdir="${test.classes}"/>

       <test classpathref="test.classpath"
             dir="${src.bson}/test"
             includes="**/*Test.java"/>
       <test classpathref="test.classpath"
              dir="${src.driver}/test"
              includes="**/*Test.java"/>
       <test classpathref="test.classpath"
              dir="${src.driver-compat}/test"
              includes="**/*Test.java"/>
    </target>

    <target name="artifact-test">
        <mkdir dir="${test.classes}"/>
        <path id="artifact.classpath">
            <pathelement location="${artifact.file}"/>
            <path refid="test.lib.classpath"/>
            <pathelement location="${test.classes}"/>
        </path>

        <compile classpathref="artifact.classpath"
                 srcdir="${src.bson}/test"
                 destdir="${test.classes}"/>
        <compile classpathref="artifact.classpath"
                 srcdir="${src.driver-compat}/test"
                 destdir="${test.classes}"/>
        <compile classpathref="artifact.classpath"
                 srcdir="${src.driver}/test"
                 destdir="${test.classes}"/>

        <test classpathref="artifact.classpath"
              dir="${src.bson}/test"
              includes="**/*Test.java"/>
        <test classpathref="artifact.classpath"
              dir="${src.driver}/test"
              includes="**/*Test.java"/>
        <test classpathref="artifact.classpath"
              dir="${src.driver-compat}/test"
              includes="**/*Test.java"/>

        <antcall target="test"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- The coverage targets                                                -->
    <!-- ******************************************************************* -->

    <target name="cobertura-instrument" depends="compile">

        <delete file="${cobertura.datafile}"/>

        <cobertura-instrument todir="${cobertura.classes}" datafile="${cobertura.datafile}">
            <fileset dir="${build.classes}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>

    </target>

    <target name="cobertura-report">
        <cobertura-report format="html" destdir="${cobertura.output}"
                          datafile="${cobertura.datafile}">
            <fileset dir="${src.bson}/main"/>
            <fileset dir="${src.driver}/main"/>
            <fileset dir="${src.driver-compat}/main"/>
        </cobertura-report>
        <cobertura-report format="xml" destdir="${cobertura.output}"
                          datafile="${cobertura.datafile}">
            <fileset dir="${src.bson}/main"/>
            <fileset dir="${src.driver}/main"/>
            <fileset dir="${src.driver-compat}/main"/>
        </cobertura-report>

    </target>

    <target name="coverage" depends="cobertura-instrument, test, cobertura-report"/>

    <!-- ******************************************************************* -->
    <!-- Misc targets                                                        -->
    <!-- ******************************************************************* -->

    <target name="check-binary-compatibility" depends="jar">

        <property name="jar.baseline" value="mongo-${build.conf.compatibility.baseline.version}.jar"/>

        <get src="${build.conf.url.libbase}/${ant.project.name}/${jar.baseline}" dest="${jar.baseline}"
             verbose="true" usetimestamp="true"/>

        <clirr failOnBinError="no" failOnSrcError="no">
            <origfiles dir="." includes="${jar.baseline}"/>
            <newfiles dir="." includes="mongo.jar"/>
            <formatter type="plain" outfile="${build.dir}/clirr.txt"/>
        </clirr>
    </target>

</project>
